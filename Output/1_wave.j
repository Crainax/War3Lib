//===========================================================================
//
// - |cff00ff00单元测试地图|r -
//
//   Warcraft III map script
//   Generated by the Warcraft III World Editor
//   Date: Sun Nov 27 05:00:30 2022
//   Map Author: Crainax
//
//===========================================================================
//***************************************************************************
//*
//*  Global Variables
//*
//***************************************************************************
globals
    // Generated
    rect gg_rct_Wave1 = null
    rect gg_rct_Wave2 = null
    rect gg_rct_Wave3 = null
    rect gg_rct_Wave4 = null
    rect gg_rct_Base = null
    rect gg_rct_BaseBack = null
    rect gg_rct_Home1 = null
    rect gg_rct_Home2 = null
    rect gg_rct_Home3 = null
    rect gg_rct_Home4 = null
    rect gg_rct_Fuben1 = null
    rect gg_rct_Fuben2 = null
    rect gg_rct_Fuben3 = null
    rect gg_rct_Fuben4 = null
    rect gg_rct_Fuben5 = null
    rect gg_rct_Fuben6 = null
    rect gg_rct_Fuben7 = null
    rect gg_rct_Fuben8 = null
    trigger gg_trg_______u = null
    unit gg_unit_hcas_0011 = null
endglobals
function InitGlobals takes nothing returns nothing
endfunction
//***************************************************************************
//*
//*  Unit Creation
//*
//***************************************************************************
//===========================================================================
function CreateBuildingsForPlayer8 takes nothing returns nothing
    local player p = Player(8)
    local unit u
    local integer unitID
    local trigger t
    local real life
    set gg_unit_hcas_0011 = CreateUnit( p, 'hcas', -64.0, -1984.0, 270.000 )
endfunction
//===========================================================================
function CreatePlayerBuildings takes nothing returns nothing
    call CreateBuildingsForPlayer8( )
endfunction
//===========================================================================
function CreatePlayerUnits takes nothing returns nothing
endfunction
//===========================================================================
function CreateAllUnits takes nothing returns nothing
    call CreatePlayerBuildings( )
    call CreatePlayerUnits( )
endfunction
//***************************************************************************
//*
//*  Regions
//*
//***************************************************************************
function CreateRegions takes nothing returns nothing
    local weathereffect we
    set gg_rct_Wave1 = Rect( -5088.0, 3168.0, -4448.0, 3968.0 )
    set gg_rct_Wave2 = Rect( -1568.0, 3360.0, -928.0, 4160.0 )
    set gg_rct_Wave3 = Rect( 1312.0, 3584.0, 1952.0, 4384.0 )
    set gg_rct_Wave4 = Rect( 4320.0, 3232.0, 4960.0, 4032.0 )
    set gg_rct_Base = Rect( -320.0, -2304.0, 192.0, -1664.0 )
    set gg_rct_BaseBack = Rect( -320.0, -3328.0, 160.0, -2848.0 )
    set gg_rct_Home1 = Rect( -10496.0, 1440.0, -8128.0, 3776.0 )
    set gg_rct_Home2 = Rect( 7712.0, 1568.0, 10080.0, 3904.0 )
    set gg_rct_Home3 = Rect( -10464.0, -3680.0, -8096.0, -1344.0 )
    set gg_rct_Home4 = Rect( 7712.0, -3552.0, 10080.0, -1216.0 )
    set gg_rct_Fuben1 = Rect( -11872.0, 7968.0, -8224.0, 11584.0 )
    set gg_rct_Fuben2 = Rect( -5472.0, 8000.0, -1824.0, 11616.0 )
    set gg_rct_Fuben3 = Rect( 1184.0, 8000.0, 4832.0, 11616.0 )
    set gg_rct_Fuben4 = Rect( 7712.0, 7968.0, 11360.0, 11584.0 )
    set gg_rct_Fuben5 = Rect( -11872.0, -11328.0, -8224.0, -7712.0 )
    set gg_rct_Fuben6 = Rect( -5472.0, -11328.0, -1824.0, -7712.0 )
    set gg_rct_Fuben7 = Rect( 1184.0, -11328.0, 4832.0, -7712.0 )
    set gg_rct_Fuben8 = Rect( 7712.0, -11328.0, 11360.0, -7712.0 )
endfunction
//***************************************************************************
//*
//*  Custom Script Code
//*
//***************************************************************************
//TESH.scrollpos=0
//TESH.alwaysfold=0
// 当前构建版本
// 当前的平台分包
    // 单元测试
    // lua_print: 单元测试
// #define StructMode // todo:结构体数量查看模式:用条件编译直接全部搞定
//函数入口
// 用原始地图测试
// 用空地图测试
/*
常用常量
*/
//玩家总数
//! zinc
library Constant {
    public integer playerCount = 0; //从游戏开始的玩家人数
public integer renshu = 0; //动态游戏人数

    function onInit () {
        integer i;
        for (1 <= i <= 4) {
            if ((GetPlayerSlotState(ConvertedPlayer(i)) == PLAYER_SLOT_STATE_PLAYING) && (GetPlayerController(ConvertedPlayer(i)) == MAP_CONTROL_USER)) {
                playerCount += 1;
                renshu += 1;
            }
        }
    }
}
//! endzinc
//! zinc
/*
公用变量
*/
library Variable requires Constant {
	//玩家信息
	public struct pd [] {
		integer gold;	//金币
integer gem;	//宝石
integer kill;	//杀怪
string name;	//名字

		integer goldRate;	//金币获取率,除100
integer goldNega;	//金币负获取率,除100
integer gemRate;	//结晶获取率,除100
integer gemNega;	//结晶负获取率,除100
integer killExtra;	//不用除100,单纯加减
integer killNega;	//不用除100,单纯加减
//以后再说:要不要金币与宝石突破上限

		optional module auraAfter; //引用
}
	//主英雄
	public unit H[];
	public unit USelected[]; //正在选择的单位[同步]

	//表数据
	public hashtable UNTable = InitHashtable(); //以unittype为头的表
public hashtable UTTable = InitHashtable(); //以unit为头的表
public hashtable TITable = InitHashtable(); //以计时器为头的表
public hashtable GRTable = InitHashtable(); //以单位组为头的表
public hashtable SPTable = InitHashtable(); //以SpellStruct为头的表

	//选择事件
	public trigger TrSelect = null;
	//[结构体创建事件]类型
	public integer StType = 0;
	//[结构体创建事件]指针
	public integer StThis = 0;
	//[结构体创建事件]触发器
	public trigger TrStruct = null;
	//几个矩形区域
	public rect RHome[];
	public rect RFuben[];
	public function OnStructCreate (integer typeid,integer stthis) {
		StType = typeid;
		StThis = stthis;
		if (TrStruct != null) {
			TriggerEvaluate(TrStruct);
		}
	}
	function onInit () {
		//在游戏开始0.1秒后再调用
		integer i = 1;
		trigger tr = CreateTrigger();
		TriggerRegisterTimerEventSingle(tr,0.2);
		TriggerAddCondition(tr,Condition(function (){
			integer i;
			for (1 <= i <= 4) {
				pd[i].name = GetPlayerName(ConvertedPlayer(i));
			}
			DestroyTrigger(GetTriggeringTrigger());
		}));
		tr = null;
		//选单位的事件[同步]
		TrSelect = CreateTrigger();
		for (1 <= i <= 4) {TriggerRegisterPlayerSelectionEventBJ(TrSelect, ConvertedPlayer(i), true);}
		TriggerAddCondition(TrSelect, Condition(function (){
			//单位选择事件[同步]
			integer index = GetConvertedPlayerId(GetTriggerPlayer());
			USelected[index] = GetTriggerUnit();
		}));
	}
}
//! endzinc
//! zinc
/*
特效工具
*/
library EffectUtils requires GroupUtils {
    public struct efut [] {
        static integer args1 = 0;
        static group g = null; //临时
}
    //直线型特效
    public struct missile {
        public static thistype ethis = 0;	//正在运行的实例获取
static timer t = null; //运动计时器
static thistype List [];	//内容列表
static integer size = 0;	//现在有几个东西

        integer uID; //[成员]绑定的ID
real x, y, z, dx, dy, dz; //[成员]起点与终点
real xySpeed, zSpeed, speed;	//[成员]移动速度
effect e; //[成员]特效本体
trigger tr; //[成员]特效到达目标后
boolean down; //[成员]是向上还是向下

        optional module efStat; //[外导的]存储信息

        method isExist () -> boolean {return (this != null && si__missile_V[this] == -1);}
        method onDestroy () {
            DestroyEffect(e);
            DestroyTrigger(tr);
            e = null;
            tr = null;
        }
        method unreg () {
            if (!(isExist())) return;
            if (uID != 0) {
                //这个其实就是将List的[2]设成5  假设2是删  5是最长
                //然后实例5的trID设成了2(之后再新建的话又是5了  这个基本也是独立)
                //但是实例[2]本身的内容已经被清除. 循环读的是List不受影响(虽然List[5]还是5但是无影响)
                List[uID] = List[size];
                List[uID].uID = uID;
                size -= 1;
                uID = 0;
            }
            this.destroy();
        }
        //func1 是结束时调用
        static method reg (string s,real x,real y,real z,real dx,real dy,real dz,real speed,code func1) -> thistype {
            real distanceXY , distance , distanceZ;
            thistype this = allocate();
            if (this <= 0) {return this;}
            if (size > 8190) {return this;} //防止爆炸

            if (func1 != null) {
                tr = CreateTrigger();
                TriggerAddCondition(tr,Condition(func1));
            }
            e = AddSpecialEffect(s, x, y );
            EXSetEffectZ(e,z);
            EXEffectMatRotateZ(e,GetFacing(x,y,dx,dy));
            this.x = x;
            this.y = y;
            this.z = z;
            this.dx = dx;
            this.dy = dy;
            this.dz = dz;
            distanceXY = GetDistance(x,y,dx,dy);
            distanceZ = RAbsBJ(z-dz);
            distance = GetDistanceZ(x,y,z,dx,dy,dz);
            if (distance > 0) { //设置一下速度
this.speed = speed;
                this.xySpeed = speed * SquareRoot(distanceXY * distanceXY / distance / distance);
                this.zSpeed = speed * SquareRoot(distanceZ * distanceZ / distance / distance);
                if (dz > z) {
                    down = false;
                } else {
                    down = true;
                }
            } else { //原地还行,那就立刻触发吧
if (tr != null) {
                    ethis = this;
                    TriggerEvaluate(tr);
                }
                destroy();
                return 0;
            }
            if (uID == 0) { //这里是初始化时的设置内容,不需要改
size += 1;
                List[size] = this;
                uID = size;
            }
            if (t == null) {
                t = CreateTimer();
                TimerStart(t,0.05,true,function (){
                    trigger tr;
                    integer i , this;
                    boolean b;
                    if (size > 0) {
                        for (1 <= i <= size) {
                            tr = CreateTrigger();
                            efut.args1 = List[i];
                            TriggerAddCondition(tr, Condition(function () -> boolean {
                                thistype this = efut.args1;
                                real angle = GetFacing(x,y,dx,dy);
                                real nx = YDWECoordinateX(x + xySpeed * CosBJ(angle));
                                real ny = YDWECoordinateY(y + xySpeed * SinBJ(angle));
                                real nz;
                                if (down) nz = RMaxBJ(dz,z - zSpeed); //向下运动,z速是负数
else nz = RMinBJ(dz,zSpeed + z); //向上运动,z速是正数

                                EXSetEffectXY(e,nx,ny);
                                EXSetEffectZ(e,nz);
                                if (GetDistanceZ(nx,ny,nz,dx,dy,dz) <= speed) { //到地方了
if (tr != null) {
                                        ethis = this;
                                        TriggerEvaluate(tr);
                                    }
                                    unreg();
                                    return false;
                                } else { //没到 存一下地点
x = nx;
                                    y = ny;
                                    z = nz;
                                }
                                return true;
                            }));
                            b = TriggerEvaluate(tr);
                            DestroyTrigger(tr);
                            tr = null;
                            if (!b) i -= 1; //代替在里面的减
}
                    }
                    if (size <= 0) { //这里就删计时器吧
PauseTimer(t);
                        DestroyTimer(t);
                        t = null;
                    }
                });
            }
            return this;
        }
    }
    //瞄准单位型(带Z轴的贝塞尔曲线)
    public struct umissile {
        public static thistype ethis = 0;	//正在运行的实例获取
static timer t = null; //运动计时器
static thistype List [];	//内容列表
static integer size = 0;	//现在有几个东西

        integer uID; //[成员]绑定的ID
real cd; //[成员]倒计时
real ux, uy, uz;	//[成员]贝塞尔点1(起点)
real ex, ey, ez;	//[成员]贝塞尔点2(中点)
real nx, ny, nz;	//[成员]贝塞尔点2(终点),用于如果目标死亡的缓存点
unit u; //[成员]目标单位
effect e; //[成员]特效本体
trigger tr; //[成员]特效到达目标后

        optional module efStat; //[外导的]存储信息

        method isExist () -> boolean {return (this != null && si__umissile_V[this] == -1);}
        method onDestroy () {
            DestroyEffect(e);
            DestroyTrigger(tr);
            e = null;
            tr = null;
            u = null;
        }
        method unreg () {
            if (!(isExist())) return;
            if (uID != 0) {
                //这个其实就是将List的[2]设成5  假设2是删  5是最长
                //然后实例5的trID设成了2(之后再新建的话又是5了  这个基本也是独立)
                //但是实例[2]本身的内容已经被清除. 循环读的是List不受影响(虽然List[5]还是5但是无影响)
                List[uID] = List[size];
                List[uID].uID = uID;
                size -= 1;
                uID = 0;
            }
            this.destroy();
        }
        //由于是跟踪型,目标
        static method reg (string s,real x,real y,real z,unit target,code func1) -> thistype {
            real angle,angle2;
            real x1,y1;
            integer random;
            thistype this = allocate();
            if (this <= 0) {return this;}
            if (size > 8190) {return this;} //防止爆炸

            if (func1 != null) {
                tr = CreateTrigger();
                TriggerAddCondition(tr,Condition(func1));
            }
			angle = GetFacing(x,y,GetUnitX(target),GetUnitY(target));
			ux = YDWECoordinateX(x - 60 * CosBJ(angle));
			uy = YDWECoordinateY(y - 60 * SinBJ(angle));
			uz = z + 80;
			x1 = YDWECoordinateX(x - 1 * CosBJ(angle));
			y1 = YDWECoordinateY(y - 1 * SinBJ(angle));
			angle2 = GetFacing(x,y,x1,y1);
			random = GetRandomInt(1,10);
			ex = CosBJ(90-(18*random+angle2)) * 1000 + x1;
			ey = SinBJ(90-(18*random+angle2)) * 1000 + y1;
			ez = 600;
			e = AddSpecialEffect(s, ux,uy );
			u = target;
			cd = 0.;
			nx = GetUnitX(target);
			ny = GetUnitY(target);
			nz = GetUnitFlyHeight(target) + 50;
			EXSetEffectZ(e,uz);
            if (uID == 0) { //这里是初始化时的设置内容,不需要改
size += 1;
                List[size] = this;
                uID = size;
            }
            if (t == null) {
                t = CreateTimer();
                TimerStart(t,0.03,true,function (){
                    trigger tr;
                    integer i , this;
                    boolean b;
                    if (size > 0) {
                        for (1 <= i <= size) {
                            tr = CreateTrigger();
                            efut.args1 = List[i];
                            TriggerAddCondition(tr, Condition(function () -> boolean {
                                thistype this = efut.args1;
                                real tx,ty,tz; //贝塞尔坐标
real txi,tyi; //下一步的位置,求出角度

                                if (cd > 0.98) { //到地方了
if (tr != null) {
                                        ethis = this;
                                        TriggerEvaluate(tr);
                                    }
                                    unreg();
                                    return false;
                                } else { //没到 存一下地点以防万一
if (IsUnitAliveBJ(u)) { //活着跟踪
nx = GetUnitX(u);
                                        ny = GetUnitY(u);
                                        nz = GetUnitFlyHeight(u) + 50;
                                    } //没活着就

                                    cd += 0.02;
                                    tx = Pow((1-cd),2)*ux + 2 *cd * (1-cd)*ex + Pow(cd,2)*nx;
                                    ty = Pow((1-cd),2)*uy + 2 *cd * (1-cd)*ey + Pow(cd,2)*ny;
                                    tz = Pow((1-cd),2)*uz + 2 *cd * (1-cd)*ez + Pow(cd,2)*nz;
                                    EXSetEffectZ(e,tz);
                                    EXSetEffectXY(e,tx,ty);
                                    EXEffectMatReset(e);
                                    txi = Pow((1-(cd+0.02)),2)*ux + 2 *(cd+0.02) * (1-(cd+0.02))*ex + Pow((cd+0.02),2)*nx;
                                    tyi = Pow((1-(cd+0.02)),2)*uy + 2 *(cd+0.02) * (1-(cd+0.02))*ey + Pow((cd+0.02),2)*ny;
                                    EXEffectMatRotateZ(e,GetFacing(tx,ty,txi,tyi));
                                }
                                return true;
                            }));
                            b = TriggerEvaluate(tr);
                            DestroyTrigger(tr);
                            tr = null;
                            if (!b) i -= 1; //代替在里面的减
}
                    }
                    if (size <= 0) { //这里就删计时器吧
PauseTimer(t);
                        DestroyTimer(t);
                        t = null;
                    }
                });
            }
            return this;
        }
    }
    //直线穿透型
    public struct pierce {
        public static thistype ethis = 0;	//正在运行的实例获取
static timer t = null; //运动计时器
static thistype List []; //内容列表
static integer size = 0; //现在有几个东西

        integer uID; //[成员]绑定的ID
real x, y, dx, dy;	//[成员]起点与终点(没有Z)
real speed,radius;	//[成员]移动速度/单位组检测范围
effect e; //[成员]特效本体
trigger trU,trEnd;	//[成员]触发(伤害时(与帧事件)/结束时)
group g; //[成员]缓存单位组

        optional module efStat; //[外导的]存储信息

        method isExist () -> boolean {return (this != null && si__pierce_V[this] == -1);}
        method onDestroy () {
            DestroyEffect(e);
            DestroyTrigger(trU);
            DestroyTrigger(trEnd);
            DestroyGroup(g);
            e = null;
            trU = null;
            trEnd = null;
            g = null;
        }
        method unreg () {
            if (!(isExist())) return;
            if (uID != 0) {
                //这个其实就是将List的[2]设成5  假设2是删  5是最长
                //然后实例5的trID设成了2(之后再新建的话又是5了  这个基本也是独立)
                //但是实例[2]本身的内容已经被清除. 循环读的是List不受影响(虽然List[5]还是5但是无影响)
                List[uID] = List[size];
                List[uID].uID = uID;
                size -= 1;
                uID = 0;
            }
            this.destroy();
        }
        //func1 是结束时调用
        static method reg (string s,real x,real y,real dx,real dy,real speed,real radius,code funU,code funEnd) -> thistype {
            thistype this = allocate();
            if (this <= 0) {return this;}
            if (size > 8190) {return this;} //防止爆炸

            if (funU != null) {
                trU = CreateTrigger();
                TriggerAddCondition(trU,Condition(funU));
            }
            if (funEnd != null) {
                trEnd = CreateTrigger();
                TriggerAddCondition(trEnd,Condition(funEnd));
            }
            e = AddSpecialEffect(s, x, y );
            EXEffectMatRotateZ(e,GetFacing(x,y,dx,dy));
            this.x = x;
            this.y = y;
            this.dx = dx;
            this.dy = dy;
            this.speed = speed;
            this.radius = radius;
            this.g = CreateGroup();
            if (uID == 0) { //这里是初始化时的设置内容,不需要改
size += 1;
                List[size] = this;
                uID = size;
            }
            if (t == null) {
                t = CreateTimer();
                TimerStart(t,0.05,true,function (){
                    trigger tr;
                    integer i , this;
                    boolean b;
                    if (size > 0) {
                        for (1 <= i <= size) {
                            tr = CreateTrigger();
                            efut.args1 = List[i];
                            TriggerAddCondition(tr, Condition(function () -> boolean {
                                thistype this = efut.args1;
                                real angle = GetFacing(x,y,dx,dy);
                                real nx = YDWECoordinateX(x + speed * CosBJ(angle));
                                real ny = YDWECoordinateY(y + speed * SinBJ(angle));
                                EXSetEffectXY(e,nx,ny);
                                efut.g = CreateGroup();
                                efut.args1 = this;
                                GroupEnumUnitsInRangeEx(efut.g, nx,ny, radius, Filter(function () -> boolean {
                                    thistype this = efut.args1;
                                    if (!IsUnitInGroup(GetFilterUnit(),g)) {
                                        GroupAddUnit(g,GetFilterUnit());
                                        return true;
                                    }
                                    return false;
                                }));
                                if (trU != null) { //针对每个穿刺到的单位进行操作,也自动归进单位组了
ethis = this;
                                    TriggerEvaluate(trU); //Frame也写到这里吧 帧事件
}
                                DestroyGroup(efut.g);
                                efut.g = null;
                                if (GetDistance(nx,ny,dx,dy) <= speed) { //到地方了
if (trEnd != null) {
                                        ethis = this;
                                        TriggerEvaluate(trEnd);
                                    }
                                    unreg();
                                    return false;
                                } else { //没到 存一下地点
x = nx;
                                    y = ny;
                                }
                                return true;
                            }));
                            b = TriggerEvaluate(tr);
                            DestroyTrigger(tr);
                            tr = null;
                            if (!b) i -= 1; //代替在里面的减
}
                    }
                    if (size <= 0) { //这里就删计时器吧
PauseTimer(t);
                        DestroyTimer(t);
                        t = null;
                    }
                });
            }
            return this;
        }
    }
}
//! endzinc
//! zinc
//blp
//blp
//blp
//自动生成的文件
library UTEffectUtils requires optional EffectUtils,Variable { //blp
//blp
//blp

	//blp
	//blp
	//blp
	//blp
	//blp
	function TTestUTEffectUtils1 (player p) {
		MemoryLeakShow();
		StructShow();
		GetLocalizedHotkey("yd_leak_monitor::create_report");
		DumpAllString("PO_stringTT.txt");
	}
	//blp
	//blp
	//blp
	function TTestUTEffectUtils2 (player p) { //测试一下纯直线弹幕
missile ms;
		integer i;
		for (1 <= i <= 10) {
			ms = missile.reg("units\\human\\phoenix\\phoenix.mdl",GetRandomReal(-2000,2000),GetRandomReal(-2000,2000),0,GetRandomReal(-2000,2000),GetRandomReal(-2000,2000),0,GetRandomReal(30,100),function(){
				BJDebugMsg("到达地点咯!");
			});
		}
	}
	function TTestUTEffectUtils3 (player p) { //測試一下向上飞的直线弹幕
missile ms;
		integer i;
		real x;
		real y;
		for (1 <= i <= 10) {
			// ms = missile.reg("units\\human\\phoenix\\phoenix.mdl",0,0,0,GetRandomReal(-1000,2000),GetRandomReal(-1000,2000),GetRandomReal(2000,3000),GetRandomReal(10,30),function(){
			// 	BJDebugMsg("飞天咯!");
			// });
			x = GetRandomReal(-1000,2000);
			y = GetRandomReal(-1000,2000);
			ms = missile.reg("units\\human\\phoenix\\phoenix.mdl",x,y,0,x,y,GetRandomReal(2000,3000),GetRandomReal(30,100),function(){
				BJDebugMsg("飞天咯!");
			});
			EXEffectMatRotateY(ms.e,270);
			// EXEffectMatRotateY(ms.e,90);
		}
	}
	function TTestUTEffectUtils4 (player p) { //測試一下向下飞的直线弹幕
missile ms;
		integer i;
		real x;
		real y;
		for (1 <= i <= 10) {
			// ms = missile.reg("units\\human\\phoenix\\phoenix.mdl",GetRandomReal(-1000,2000),GetRandomReal(-1000,2000),GetRandomReal(2000,3000),0,0,0,GetRandomReal(10,30),function(){
			// 	BJDebugMsg("落地咯!");
			// });
			x = GetRandomReal(-1000,2000);
			y = GetRandomReal(-1000,2000);
			ms = missile.reg("units\\human\\phoenix\\phoenix.mdl",x,y,GetRandomReal(2000,3000),x,y,0,GetRandomReal(30,100),function(){
				BJDebugMsg("落地咯!");
			});
			EXEffectMatRotateY(ms.e,90);
		}
	}
	effect ef = null;
	function TTestUTEffectUtils5 (player p) { //研究一下特效X轴旋转
timer t;
		if (ef == null) {
			ef = AddSpecialEffect("units\\human\\phoenix\\phoenix.mdl", 0,0 );
			EXSetEffectZ(ef,100);
			EXEffectMatScale(ef,2.0,2.0,2.0);
		}
		t = CreateTimer();
		SaveInteger(TITable,GetHandleId(t),1,1);
		TimerStart(t,0.02,true,function (){
			timer t = GetExpiredTimer();
			integer id = GetHandleId(t);
			integer i = LoadInteger(TITable,id,1);
			if (i <= 360) {
				EXEffectMatRotateX(ef,1.0);
				i += 1;
				SaveInteger(TITable,id,1,i);
			} else {
				PauseTimer(t);
				FlushChildHashtable(TITable,id);
				DestroyTimer(t);
			}
			t = null;
		});
		t = null;
	}
	function TTestUTEffectUtils6 (player p) { //研究一下特效Y轴旋转
timer t;
		if (ef == null) {
			ef = AddSpecialEffect("units\\human\\phoenix\\phoenix.mdl", 0,0 );
			EXSetEffectZ(ef,100);
			EXEffectMatScale(ef,2.0,2.0,2.0);
		}
		t = CreateTimer();
		SaveInteger(TITable,GetHandleId(t),1,1);
		TimerStart(t,0.02,true,function (){
			timer t = GetExpiredTimer();
			integer id = GetHandleId(t);
			integer i = LoadInteger(TITable,id,1);
			if (i <= 360) {
				EXEffectMatRotateY(ef,1.0);
				i += 1;
				SaveInteger(TITable,id,1,i);
			} else {
				PauseTimer(t);
				FlushChildHashtable(TITable,id);
				DestroyTimer(t);
			}
			t = null;
		});
		t = null;
	}
	function TTestUTEffectUtils7 (player p) { //研究一下特效Z轴旋转:就是普通的
timer t;
		if (ef == null) {
			ef = AddSpecialEffect("units\\human\\phoenix\\phoenix.mdl", 0,0 );
			EXSetEffectZ(ef,100);
			EXEffectMatScale(ef,2.0,2.0,2.0);
		}
		t = CreateTimer();
		SaveInteger(TITable,GetHandleId(t),1,1);
		TimerStart(t,0.02,true,function (){
			timer t = GetExpiredTimer();
			integer id = GetHandleId(t);
			integer i = LoadInteger(TITable,id,1);
			if (i <= 360) {
				EXEffectMatRotateZ(ef,1.0);
				i += 1;
				SaveInteger(TITable,id,1,i);
			} else {
				PauseTimer(t);
				FlushChildHashtable(TITable,id);
				DestroyTimer(t);
			}
			t = null;
		});
		t = null;
	}
	unit u1 = null;
	unit u2 = null;
	trigger trSY = null;
	function TTestUTEffectUtils8 (player p) { //贝塞尔
timer t;
		if (trSY == null) {
			trSY = CreateTrigger();
			TriggerAddCondition(trSY, Condition(function () {
				if (GetIssuedOrderId() == String2OrderIdBJ("smart")) {
					DzSetUnitPosition(GetTriggerUnit(),GetOrderPointX(),GetOrderPointY());
				}
			}));
		}
		if (u1 == null) {
			u1 = CreateUnit(p,'Hpal',0,0,0);
			TriggerRegisterUnitEvent(trSY,u1,EVENT_UNIT_ISSUED_POINT_ORDER);
		}
		if (u2 == null) {
			u2 = CreateUnit(p,'Ewar',1000,1000,0);
			TriggerRegisterUnitEvent(trSY,u2,EVENT_UNIT_ISSUED_POINT_ORDER);
		}
		t = CreateTimer();
		SaveInteger(TITable,GetHandleId(t),1,1);
		TimerStart(t,0.1,true,function (){
			timer t2;
			timer t = GetExpiredTimer();
			integer id = GetHandleId(t);
			integer i = LoadInteger(TITable,id,1);
			real angle = GetFacing(GetUnitX(u1),GetUnitY(u1),GetUnitX(u2),GetUnitY(u2));
			real ux = GetUnitX(u1) - 60 * CosBJ(angle);
			real uy = GetUnitY(u1) - 60 * SinBJ(angle);
			real uz = GetUnitFlyHeight(u1) + 80;
			real x1 = GetUnitX(u1) - 1 * CosBJ(angle);
			real y1 = GetUnitY(u1) - 1 * SinBJ(angle);
			real angle2 = GetFacing(GetUnitX(u1),GetUnitY(u1),x1,y1);
			integer random = GetRandomInt(1,10);
			real ex = CosBJ(90-(18*random+angle2)) * 1000 + x1;
			real ey = SinBJ(90-(18*random+angle2)) * 1000 + y1;
			real ez = 600;
			effect e = AddSpecialEffect("Abilities\\Weapons\\PoisonArrow\\PoisonArrowMissile.mdl", ux,uy );
			EXSetEffectZ(e,uz);
			if (i <= 100) {
				t2 = CreateTimer();
				SaveReal(TITable,GetHandleId(t2),1,0.0);
				SaveReal(TITable,GetHandleId(t2),2,ux);
				SaveReal(TITable,GetHandleId(t2),3,uy);
				SaveReal(TITable,GetHandleId(t2),4,uz);
				SaveReal(TITable,GetHandleId(t2),5,ex);
				SaveReal(TITable,GetHandleId(t2),6,ey);
				SaveReal(TITable,GetHandleId(t2),7,ez);
				SaveEffectHandle(TITable,GetHandleId(t2),8,e);
				TimerStart(t2,0.03,true,function (){
					timer t2 = GetExpiredTimer();
					integer id = GetHandleId(t2);
					real cd = LoadReal(TITable,id,1);
					real ux = LoadReal(TITable,id,2);
					real uy = LoadReal(TITable,id,3);
					real uz = LoadReal(TITable,id,4);
					real ex = LoadReal(TITable,id,5);
					real ey = LoadReal(TITable,id,6);
					real ez = LoadReal(TITable,id,7);
					effect e = LoadEffectHandle(TITable,id,8);
					real nx,ny,nz; //当前单位的位置
real tx,ty,tz; //
real txi,tyi; //下一步的位置,求出角度
if (cd <= 0.98) {
						nx = GetUnitX(u2);
						ny = GetUnitY(u2);
						nz = GetUnitFlyHeight(u2) + 50;
						cd += 0.02;
						tx = Pow((1-cd),2)*ux + 2 *cd * (1-cd)*ex + Pow(cd,2)*nx;
						ty = Pow((1-cd),2)*uy + 2 *cd * (1-cd)*ey + Pow(cd,2)*ny;
						tz = Pow((1-cd),2)*uz + 2 *cd * (1-cd)*ez + Pow(cd,2)*nz;
						EXSetEffectZ(e,tz);
						EXSetEffectXY(e,tx,ty);
						EXEffectMatReset(e);
						txi = Pow((1-(cd+0.02)),2)*ux + 2 *(cd+0.02) * (1-(cd+0.02))*ex + Pow((cd+0.02),2)*nx;
						tyi = Pow((1-(cd+0.02)),2)*uy + 2 *(cd+0.02) * (1-(cd+0.02))*ey + Pow((cd+0.02),2)*ny;
						EXEffectMatRotateZ(e,GetFacing(tx,ty,txi,tyi));
						SaveReal(TITable,id,1,cd);
					} else {
						DestroyEffect(e);
						PauseTimer(t2);
						FlushChildHashtable(TITable,id);
						DestroyTimer(t2);
					}
					t2 = null;
					e = null;
				});
				t2 = null;
				i += 1;
				SaveInteger(TITable,id,1,i);
			} else {
				DestroyEffect(e);
				PauseTimer(t);
				FlushChildHashtable(TITable,id);
				DestroyTimer(t);
			}
			t = null;
			e = null;
		});
		t = null;
	}
	function TTestUTEffectUtils9 (player p) { //测试一下umissile
timer t;
		if (trSY == null) {
			trSY = CreateTrigger();
			TriggerAddCondition(trSY, Condition(function () {
				if (GetIssuedOrderId() == String2OrderIdBJ("smart")) {
					DzSetUnitPosition(GetTriggerUnit(),GetOrderPointX(),GetOrderPointY());
				}
			}));
		}
		if (u1 == null) {
			u1 = CreateUnit(p,'Hpal',0,0,0);
			TriggerRegisterUnitEvent(trSY,u1,EVENT_UNIT_ISSUED_POINT_ORDER);
		}
		if (u2 == null) {
			u2 = CreateUnit(p,'Ewar',1000,1000,0);
			TriggerRegisterUnitEvent(trSY,u2,EVENT_UNIT_ISSUED_POINT_ORDER);
		}
		t = CreateTimer();
		SaveInteger(TITable,GetHandleId(t),1,1);
		TimerStart(t,0.1,true,function (){
			timer t = GetExpiredTimer();
			integer id = GetHandleId(t);
			integer i = LoadInteger(TITable,id,1);
			if (i <= 100) {
				umissile.reg("Abilities\\Weapons\\PoisonArrow\\PoisonArrowMissile.mdl",GetUnitX(u1),GetUnitY(u1),GetUnitFlyHeight(u1),u2,function(){
					BJDebugMsg("击中了哦.");
				});
				i += 1;
				SaveInteger(TITable,id,1,i);
			} else {
				PauseTimer(t);
				FlushChildHashtable(TITable,id);
				DestroyTimer(t);
			}
			t = null;
		});
		t = null;
	}
	integer fra[];
	function TTestUTEffectUtils10 (player p) { //测试一下穿刺
pierce pe;
		integer i;
		integer index = GetConvertedPlayerId(p);
		ForGroup(YDWEGetUnitsInRectAllNull(GetPlayableMapRect()),function () {
			if (GetUnitTypeId(GetEnumUnit()) == 'nmam') {
				RemoveUnit(GetEnumUnit());
			}
		});
		// for (1 <= i <= 10) {
		pe = pierce.reg("Abilities\\Spells\\Orc\\Shockwave\\ShockwaveMissile.mdl",GetRandomReal(-2000,-1000),GetRandomReal(-2000,-1000),GetRandomReal(1000,2000),GetRandomReal(1000,2000),100,450,function(){ //帧事件与单位
pierce pe = pierce.ethis;
			if (CountUnitsInGroup(efut.g) > 0) {
				ForGroup(efut.g,function () {
					pierce pe = pierce.ethis;
					integer index = 1;
					if (IsEnemyIncludeInvul(Player(0),GetEnumUnit())) {
						BJDebugMsg(pd[index].name +"的敌人:"+GetUnitName(GetEnumUnit()));
						KillUnit(GetEnumUnit());
					} else if (IsAlly(Player(0),GetEnumUnit())) {
						BJDebugMsg(pd[index].name +"的队友:"+GetUnitName(GetEnumUnit()));
						SetUnitState(GetEnumUnit(),UNIT_STATE_LIFE,100);
					} else {
						BJDebugMsg("已经死亡的:"+GetUnitName(GetEnumUnit()));
					}
				});
			}
			fra[pe] = ModuloInteger(fra[pe],3)+1;
			if (ModuloInteger(fra[pe],3) == 0) {
				DestroyEffect(AddSpecialEffect("Abilities\\Spells\\Other\\Charm\\CharmTarget.mdl", pe.x,pe.y ));
			}
		},
		function(){ //结束事件
pierce pe = pierce.ethis;
			BJDebugMsg("结束啦!!");
		});
		// pe.h = MH[index];
		fra[pe]= 0;
		EXEffectMatScale(pe.e,3.0,3.0,3.0);
		EXSetEffectZ(pe.e,200);
		// }
		for (1 <= i <= 20) { //创建几个单位
CreateUnit(Player(PLAYER_NEUTRAL_AGGRESSIVE),'nmam',GetRandomReal(-200,200),GetRandomReal(-200,200),0);
			CreateUnit(Player(0),'nmam',GetRandomReal(-200,200),GetRandomReal(-200,200),0);
		}
	}
	real xLi = 0.;
	real yLi = 0.;
	function TTestUTEffectUtils11 (player p) { //测试一下边界点
timer t;
		t = CreateTimer();
		SaveInteger(TITable,GetHandleId(t),1,1);
		TimerStart(t,0.05,true,function (){
			timer t = GetExpiredTimer();
			integer id = GetHandleId(t);
			integer i = LoadInteger(TITable,id,1);
			pierce pe;
			if (i <= 720) {
				//每个角度各来一发
				radiationEnd.cal(xLi,yLi,i*0.5);
				pe = pierce.reg("Abilities\\Spells\\Orc\\Shockwave\\ShockwaveMissile.mdl",xLi,
				yLi,YDWECoordinateX(radiationEnd.x),YDWECoordinateY(radiationEnd.y),100,450,function(){ //帧事件与单位
pierce pe = pierce.ethis;
					if (CountUnitsInGroup(efut.g) > 0) {
						ForGroup(efut.g,function () {
							pierce pe = pierce.ethis;
							BJDebugMsg("单位名字:"+GetUnitName(GetEnumUnit()));
						});
					}
				},
				function(){ //结束事件
pierce pe = pierce.ethis;
					BJDebugMsg("光波("+I2S(pe)+")结束啦:"+R2S(pe.x)+","+R2S(pe.y));
				});
				i += 1;
				SaveInteger(TITable,id,1,i);
			} else {
				PauseTimer(t);
				FlushChildHashtable(TITable,id);
				DestroyTimer(t);
			}
			t = null;
		});
		t = null;
	}
	function TTestUTEffectUtils12 (player p) {
	}
	function TTestUTEffectUtils13 (player p) {
	}
	function TTestUTEffectUtils14 (player p) {
	}
	function TTestUTEffectUtils15 (player p) {
	}
	function TTestUTEffectUtils16 (player p) {
	}
	function TTestUTEffectUtils17 (player p) {
	}
	function TTestUTEffectUtils18 (player p) {
	}
	function TTestUTEffectUtils19 (player p) {
	}
	function TTestUTEffectUtils20 (player p) {
	}
	function TTestActUTEffectUtils1 (string str) {
		player p = GetTriggerPlayer();
		integer index = GetConvertedPlayerId(p);
		integer i, num = 0, len = StringLength(str); //获取范围式数字
string paramS []; //所有参数S
integer paramI []; //所有参数I
real	paramR []; //所有参数R
for (0 <= i <= len - 1) {
			if (SubString(str,i,i+1) == " ") {
				paramS[num]= SubString(str,0,i);
				paramI[num]= S2I(paramS[num]);
				paramR[num]= S2R(paramS[num]);
				num = num + 1;
				str = SubString(str,i + 1,len);
				len = StringLength(str);
				i = -1;
			}
		}
		paramS[num]= str;
		paramI[num]= S2I(paramS[num]);
		paramR[num]= S2R(paramS[num]);
		num = num + 1;
		if (paramS[0] == "x") { //测试一下混合的特效
EXEffectMatRotateX(ef,paramR[1]);
		} else if (paramS[0] == "y") {
			EXEffectMatRotateY(ef,paramR[1]);
		} else if (paramS[0] == "z") {
			EXEffectMatRotateZ(ef,paramR[1]);
		} else if (paramS[0] == "height") { //高度
EXSetEffectZ(ef,paramR[1]);
		} else if (paramS[0] == "reset") { //恢复
EXEffectMatReset(ef);
			EXEffectMatScale(ef,2.0,2.0,2.0);
		} else if (paramS[0] == "xl") { //设置一下s11的初始位置
xLi = paramR[1];
			BJDebugMsg("xLi"+":"+R2S(xLi));
		} else if (paramS[0] == "yl") { //设置一下s11的初始位置
yLi = paramR[1];
			BJDebugMsg("yLi"+":"+R2S(yLi));
		}
		p = null;
	}
	//blpend
	//blpend
	//blpend
	function onInit () {
		integer i;
		for (1 <= i <= 16) {
			CreateFogModifierRectBJ( true, ConvertedPlayer(i), FOG_OF_WAR_VISIBLE, GetPlayableMapRect() );
		}
		UnitTestRegisterChatEvent(function () {
			string str = GetEventPlayerChatString();
			integer i = 1;
			if (SubStringBJ(str,1,1) == "-") {
				TTestActUTEffectUtils1(SubStringBJ(str,2,StringLength(str)));
				return;
			}
			if (str == "s1") TTestUTEffectUtils1(GetTriggerPlayer());
			else if(str == "s2") TTestUTEffectUtils2(GetTriggerPlayer());
			else if(str == "s3") TTestUTEffectUtils3(GetTriggerPlayer());
			else if(str == "s4") TTestUTEffectUtils4(GetTriggerPlayer());
			else if(str == "s5") TTestUTEffectUtils5(GetTriggerPlayer());
			else if(str == "s6") TTestUTEffectUtils6(GetTriggerPlayer());
			else if(str == "s7") TTestUTEffectUtils7(GetTriggerPlayer());
			else if(str == "s8") TTestUTEffectUtils8(GetTriggerPlayer());
			else if(str == "s9") TTestUTEffectUtils9(GetTriggerPlayer());
			else if(str == "s10") TTestUTEffectUtils10(GetTriggerPlayer());
			else if(str == "s11") TTestUTEffectUtils11(GetTriggerPlayer());
			else if(str == "s12") TTestUTEffectUtils12(GetTriggerPlayer());
			else if(str == "s13") TTestUTEffectUtils13(GetTriggerPlayer());
			else if(str == "s14") TTestUTEffectUtils14(GetTriggerPlayer());
			else if(str == "s15") TTestUTEffectUtils15(GetTriggerPlayer());
			else if(str == "s16") TTestUTEffectUtils16(GetTriggerPlayer());
			else if(str == "s17") TTestUTEffectUtils17(GetTriggerPlayer());
			else if(str == "s18") TTestUTEffectUtils18(GetTriggerPlayer());
			else if(str == "s19") TTestUTEffectUtils19(GetTriggerPlayer());
			else if(str == "s20") TTestUTEffectUtils20(GetTriggerPlayer());
		});
	}
}
//! endzinc
// lua_print: 空白地图
//***************************************************************************
//*
//*  Triggers
//*
//***************************************************************************
//===========================================================================
// Trigger: 简介
//===========================================================================
function Trig_______uActions takes nothing returns nothing
    // 欢迎使用世界编辑器，开始你的地图创造之旅。
    // 你可以从dz.163.com获取最新编辑器咨询。
    // 当你的地图意外损坏时，你可以在backups目录找到你最近26次保存的地图。
    // 任何疑问请加官方作者群：QQ35063417。
    // 本次更新添加判断玩家是否为平台AI玩家，现在平台已经添加虚拟玩家，不用再担心匹配没人问题了！如果你的地图有AI，试试在作者之家开启这个功能吧！
endfunction
//===========================================================================
function InitTrig_______u takes nothing returns nothing
    set gg_trg_______u = CreateTrigger()
    call DoNothing()
    call TriggerAddAction(gg_trg_______u, function Trig_______uActions)
endfunction
//===========================================================================
function InitCustomTriggers takes nothing returns nothing
    call InitTrig_______u( )
endfunction
//***************************************************************************
//*
//*  Players
//*
//***************************************************************************
function InitCustomPlayerSlots takes nothing returns nothing
    // Player 0
    call SetPlayerStartLocation( Player(0), 0 )
    call ForcePlayerStartLocation( Player(0), 0 )
    call SetPlayerColor( Player(0), ConvertPlayerColor(0) )
    call SetPlayerRacePreference( Player(0), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(0), false )
    call SetPlayerController( Player(0), MAP_CONTROL_USER )
    // Player 1
    call SetPlayerStartLocation( Player(1), 1 )
    call ForcePlayerStartLocation( Player(1), 1 )
    call SetPlayerColor( Player(1), ConvertPlayerColor(1) )
    call SetPlayerRacePreference( Player(1), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(1), false )
    call SetPlayerController( Player(1), MAP_CONTROL_USER )
    // Player 2
    call SetPlayerStartLocation( Player(2), 2 )
    call ForcePlayerStartLocation( Player(2), 2 )
    call SetPlayerColor( Player(2), ConvertPlayerColor(2) )
    call SetPlayerRacePreference( Player(2), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(2), false )
    call SetPlayerController( Player(2), MAP_CONTROL_USER )
    // Player 3
    call SetPlayerStartLocation( Player(3), 3 )
    call ForcePlayerStartLocation( Player(3), 3 )
    call SetPlayerColor( Player(3), ConvertPlayerColor(3) )
    call SetPlayerRacePreference( Player(3), RACE_PREF_HUMAN )
    call SetPlayerRaceSelectable( Player(3), false )
    call SetPlayerController( Player(3), MAP_CONTROL_USER )
    // Player 4
    call SetPlayerStartLocation( Player(4), 4 )
    call ForcePlayerStartLocation( Player(4), 4 )
    call SetPlayerColor( Player(4), ConvertPlayerColor(4) )
    call SetPlayerRacePreference( Player(4), RACE_PREF_NIGHTELF )
    call SetPlayerRaceSelectable( Player(4), false )
    call SetPlayerController( Player(4), MAP_CONTROL_COMPUTER )
    // Player 5
    call SetPlayerStartLocation( Player(5), 5 )
    call ForcePlayerStartLocation( Player(5), 5 )
    call SetPlayerColor( Player(5), ConvertPlayerColor(5) )
    call SetPlayerRacePreference( Player(5), RACE_PREF_NIGHTELF )
    call SetPlayerRaceSelectable( Player(5), false )
    call SetPlayerController( Player(5), MAP_CONTROL_COMPUTER )
    // Player 6
    call SetPlayerStartLocation( Player(6), 6 )
    call ForcePlayerStartLocation( Player(6), 6 )
    call SetPlayerColor( Player(6), ConvertPlayerColor(6) )
    call SetPlayerRacePreference( Player(6), RACE_PREF_NIGHTELF )
    call SetPlayerRaceSelectable( Player(6), false )
    call SetPlayerController( Player(6), MAP_CONTROL_COMPUTER )
    // Player 7
    call SetPlayerStartLocation( Player(7), 7 )
    call ForcePlayerStartLocation( Player(7), 7 )
    call SetPlayerColor( Player(7), ConvertPlayerColor(7) )
    call SetPlayerRacePreference( Player(7), RACE_PREF_NIGHTELF )
    call SetPlayerRaceSelectable( Player(7), false )
    call SetPlayerController( Player(7), MAP_CONTROL_COMPUTER )
    // Player 8
    call SetPlayerStartLocation( Player(8), 8 )
    call ForcePlayerStartLocation( Player(8), 8 )
    call SetPlayerColor( Player(8), ConvertPlayerColor(8) )
    call SetPlayerRacePreference( Player(8), RACE_PREF_NIGHTELF )
    call SetPlayerRaceSelectable( Player(8), false )
    call SetPlayerController( Player(8), MAP_CONTROL_COMPUTER )
    // Player 9
    call SetPlayerStartLocation( Player(9), 9 )
    call ForcePlayerStartLocation( Player(9), 9 )
    call SetPlayerColor( Player(9), ConvertPlayerColor(9) )
    call SetPlayerRacePreference( Player(9), RACE_PREF_UNDEAD )
    call SetPlayerRaceSelectable( Player(9), false )
    call SetPlayerController( Player(9), MAP_CONTROL_COMPUTER )
    // Player 10
    call SetPlayerStartLocation( Player(10), 10 )
    call ForcePlayerStartLocation( Player(10), 10 )
    call SetPlayerColor( Player(10), ConvertPlayerColor(10) )
    call SetPlayerRacePreference( Player(10), RACE_PREF_UNDEAD )
    call SetPlayerRaceSelectable( Player(10), false )
    call SetPlayerController( Player(10), MAP_CONTROL_COMPUTER )
    // Player 11
    call SetPlayerStartLocation( Player(11), 11 )
    call ForcePlayerStartLocation( Player(11), 11 )
    call SetPlayerColor( Player(11), ConvertPlayerColor(11) )
    call SetPlayerRacePreference( Player(11), RACE_PREF_UNDEAD )
    call SetPlayerRaceSelectable( Player(11), false )
    call SetPlayerController( Player(11), MAP_CONTROL_COMPUTER )
endfunction
function InitCustomTeams takes nothing returns nothing
    // Force: TRIGSTR_013
    call SetPlayerTeam( Player(0), 0 )
    call SetPlayerTeam( Player(1), 0 )
    call SetPlayerTeam( Player(2), 0 )
    call SetPlayerTeam( Player(3), 0 )
    call SetPlayerTeam( Player(4), 0 )
    call SetPlayerTeam( Player(5), 0 )
    call SetPlayerTeam( Player(6), 0 )
    call SetPlayerTeam( Player(7), 0 )
    call SetPlayerTeam( Player(8), 0 )
    //   Allied
    call SetPlayerAllianceStateAllyBJ( Player(0), Player(1), true )
    call SetPlayerAllianceStateAllyBJ( Player(0), Player(2), true )
    call SetPlayerAllianceStateAllyBJ( Player(0), Player(3), true )
    call SetPlayerAllianceStateAllyBJ( Player(0), Player(4), true )
    call SetPlayerAllianceStateAllyBJ( Player(0), Player(5), true )
    call SetPlayerAllianceStateAllyBJ( Player(0), Player(6), true )
    call SetPlayerAllianceStateAllyBJ( Player(0), Player(7), true )
    call SetPlayerAllianceStateAllyBJ( Player(0), Player(8), true )
    call SetPlayerAllianceStateAllyBJ( Player(1), Player(0), true )
    call SetPlayerAllianceStateAllyBJ( Player(1), Player(2), true )
    call SetPlayerAllianceStateAllyBJ( Player(1), Player(3), true )
    call SetPlayerAllianceStateAllyBJ( Player(1), Player(4), true )
    call SetPlayerAllianceStateAllyBJ( Player(1), Player(5), true )
    call SetPlayerAllianceStateAllyBJ( Player(1), Player(6), true )
    call SetPlayerAllianceStateAllyBJ( Player(1), Player(7), true )
    call SetPlayerAllianceStateAllyBJ( Player(1), Player(8), true )
    call SetPlayerAllianceStateAllyBJ( Player(2), Player(0), true )
    call SetPlayerAllianceStateAllyBJ( Player(2), Player(1), true )
    call SetPlayerAllianceStateAllyBJ( Player(2), Player(3), true )
    call SetPlayerAllianceStateAllyBJ( Player(2), Player(4), true )
    call SetPlayerAllianceStateAllyBJ( Player(2), Player(5), true )
    call SetPlayerAllianceStateAllyBJ( Player(2), Player(6), true )
    call SetPlayerAllianceStateAllyBJ( Player(2), Player(7), true )
    call SetPlayerAllianceStateAllyBJ( Player(2), Player(8), true )
    call SetPlayerAllianceStateAllyBJ( Player(3), Player(0), true )
    call SetPlayerAllianceStateAllyBJ( Player(3), Player(1), true )
    call SetPlayerAllianceStateAllyBJ( Player(3), Player(2), true )
    call SetPlayerAllianceStateAllyBJ( Player(3), Player(4), true )
    call SetPlayerAllianceStateAllyBJ( Player(3), Player(5), true )
    call SetPlayerAllianceStateAllyBJ( Player(3), Player(6), true )
    call SetPlayerAllianceStateAllyBJ( Player(3), Player(7), true )
    call SetPlayerAllianceStateAllyBJ( Player(3), Player(8), true )
    call SetPlayerAllianceStateAllyBJ( Player(4), Player(0), true )
    call SetPlayerAllianceStateAllyBJ( Player(4), Player(1), true )
    call SetPlayerAllianceStateAllyBJ( Player(4), Player(2), true )
    call SetPlayerAllianceStateAllyBJ( Player(4), Player(3), true )
    call SetPlayerAllianceStateAllyBJ( Player(4), Player(5), true )
    call SetPlayerAllianceStateAllyBJ( Player(4), Player(6), true )
    call SetPlayerAllianceStateAllyBJ( Player(4), Player(7), true )
    call SetPlayerAllianceStateAllyBJ( Player(4), Player(8), true )
    call SetPlayerAllianceStateAllyBJ( Player(5), Player(0), true )
    call SetPlayerAllianceStateAllyBJ( Player(5), Player(1), true )
    call SetPlayerAllianceStateAllyBJ( Player(5), Player(2), true )
    call SetPlayerAllianceStateAllyBJ( Player(5), Player(3), true )
    call SetPlayerAllianceStateAllyBJ( Player(5), Player(4), true )
    call SetPlayerAllianceStateAllyBJ( Player(5), Player(6), true )
    call SetPlayerAllianceStateAllyBJ( Player(5), Player(7), true )
    call SetPlayerAllianceStateAllyBJ( Player(5), Player(8), true )
    call SetPlayerAllianceStateAllyBJ( Player(6), Player(0), true )
    call SetPlayerAllianceStateAllyBJ( Player(6), Player(1), true )
    call SetPlayerAllianceStateAllyBJ( Player(6), Player(2), true )
    call SetPlayerAllianceStateAllyBJ( Player(6), Player(3), true )
    call SetPlayerAllianceStateAllyBJ( Player(6), Player(4), true )
    call SetPlayerAllianceStateAllyBJ( Player(6), Player(5), true )
    call SetPlayerAllianceStateAllyBJ( Player(6), Player(7), true )
    call SetPlayerAllianceStateAllyBJ( Player(6), Player(8), true )
    call SetPlayerAllianceStateAllyBJ( Player(7), Player(0), true )
    call SetPlayerAllianceStateAllyBJ( Player(7), Player(1), true )
    call SetPlayerAllianceStateAllyBJ( Player(7), Player(2), true )
    call SetPlayerAllianceStateAllyBJ( Player(7), Player(3), true )
    call SetPlayerAllianceStateAllyBJ( Player(7), Player(4), true )
    call SetPlayerAllianceStateAllyBJ( Player(7), Player(5), true )
    call SetPlayerAllianceStateAllyBJ( Player(7), Player(6), true )
    call SetPlayerAllianceStateAllyBJ( Player(7), Player(8), true )
    call SetPlayerAllianceStateAllyBJ( Player(8), Player(0), true )
    call SetPlayerAllianceStateAllyBJ( Player(8), Player(1), true )
    call SetPlayerAllianceStateAllyBJ( Player(8), Player(2), true )
    call SetPlayerAllianceStateAllyBJ( Player(8), Player(3), true )
    call SetPlayerAllianceStateAllyBJ( Player(8), Player(4), true )
    call SetPlayerAllianceStateAllyBJ( Player(8), Player(5), true )
    call SetPlayerAllianceStateAllyBJ( Player(8), Player(6), true )
    call SetPlayerAllianceStateAllyBJ( Player(8), Player(7), true )
    //   Shared Vision
    call SetPlayerAllianceStateVisionBJ( Player(0), Player(1), true )
    call SetPlayerAllianceStateVisionBJ( Player(0), Player(2), true )
    call SetPlayerAllianceStateVisionBJ( Player(0), Player(3), true )
    call SetPlayerAllianceStateVisionBJ( Player(0), Player(4), true )
    call SetPlayerAllianceStateVisionBJ( Player(0), Player(5), true )
    call SetPlayerAllianceStateVisionBJ( Player(0), Player(6), true )
    call SetPlayerAllianceStateVisionBJ( Player(0), Player(7), true )
    call SetPlayerAllianceStateVisionBJ( Player(0), Player(8), true )
    call SetPlayerAllianceStateVisionBJ( Player(1), Player(0), true )
    call SetPlayerAllianceStateVisionBJ( Player(1), Player(2), true )
    call SetPlayerAllianceStateVisionBJ( Player(1), Player(3), true )
    call SetPlayerAllianceStateVisionBJ( Player(1), Player(4), true )
    call SetPlayerAllianceStateVisionBJ( Player(1), Player(5), true )
    call SetPlayerAllianceStateVisionBJ( Player(1), Player(6), true )
    call SetPlayerAllianceStateVisionBJ( Player(1), Player(7), true )
    call SetPlayerAllianceStateVisionBJ( Player(1), Player(8), true )
    call SetPlayerAllianceStateVisionBJ( Player(2), Player(0), true )
    call SetPlayerAllianceStateVisionBJ( Player(2), Player(1), true )
    call SetPlayerAllianceStateVisionBJ( Player(2), Player(3), true )
    call SetPlayerAllianceStateVisionBJ( Player(2), Player(4), true )
    call SetPlayerAllianceStateVisionBJ( Player(2), Player(5), true )
    call SetPlayerAllianceStateVisionBJ( Player(2), Player(6), true )
    call SetPlayerAllianceStateVisionBJ( Player(2), Player(7), true )
    call SetPlayerAllianceStateVisionBJ( Player(2), Player(8), true )
    call SetPlayerAllianceStateVisionBJ( Player(3), Player(0), true )
    call SetPlayerAllianceStateVisionBJ( Player(3), Player(1), true )
    call SetPlayerAllianceStateVisionBJ( Player(3), Player(2), true )
    call SetPlayerAllianceStateVisionBJ( Player(3), Player(4), true )
    call SetPlayerAllianceStateVisionBJ( Player(3), Player(5), true )
    call SetPlayerAllianceStateVisionBJ( Player(3), Player(6), true )
    call SetPlayerAllianceStateVisionBJ( Player(3), Player(7), true )
    call SetPlayerAllianceStateVisionBJ( Player(3), Player(8), true )
    call SetPlayerAllianceStateVisionBJ( Player(4), Player(0), true )
    call SetPlayerAllianceStateVisionBJ( Player(4), Player(1), true )
    call SetPlayerAllianceStateVisionBJ( Player(4), Player(2), true )
    call SetPlayerAllianceStateVisionBJ( Player(4), Player(3), true )
    call SetPlayerAllianceStateVisionBJ( Player(4), Player(5), true )
    call SetPlayerAllianceStateVisionBJ( Player(4), Player(6), true )
    call SetPlayerAllianceStateVisionBJ( Player(4), Player(7), true )
    call SetPlayerAllianceStateVisionBJ( Player(4), Player(8), true )
    call SetPlayerAllianceStateVisionBJ( Player(5), Player(0), true )
    call SetPlayerAllianceStateVisionBJ( Player(5), Player(1), true )
    call SetPlayerAllianceStateVisionBJ( Player(5), Player(2), true )
    call SetPlayerAllianceStateVisionBJ( Player(5), Player(3), true )
    call SetPlayerAllianceStateVisionBJ( Player(5), Player(4), true )
    call SetPlayerAllianceStateVisionBJ( Player(5), Player(6), true )
    call SetPlayerAllianceStateVisionBJ( Player(5), Player(7), true )
    call SetPlayerAllianceStateVisionBJ( Player(5), Player(8), true )
    call SetPlayerAllianceStateVisionBJ( Player(6), Player(0), true )
    call SetPlayerAllianceStateVisionBJ( Player(6), Player(1), true )
    call SetPlayerAllianceStateVisionBJ( Player(6), Player(2), true )
    call SetPlayerAllianceStateVisionBJ( Player(6), Player(3), true )
    call SetPlayerAllianceStateVisionBJ( Player(6), Player(4), true )
    call SetPlayerAllianceStateVisionBJ( Player(6), Player(5), true )
    call SetPlayerAllianceStateVisionBJ( Player(6), Player(7), true )
    call SetPlayerAllianceStateVisionBJ( Player(6), Player(8), true )
    call SetPlayerAllianceStateVisionBJ( Player(7), Player(0), true )
    call SetPlayerAllianceStateVisionBJ( Player(7), Player(1), true )
    call SetPlayerAllianceStateVisionBJ( Player(7), Player(2), true )
    call SetPlayerAllianceStateVisionBJ( Player(7), Player(3), true )
    call SetPlayerAllianceStateVisionBJ( Player(7), Player(4), true )
    call SetPlayerAllianceStateVisionBJ( Player(7), Player(5), true )
    call SetPlayerAllianceStateVisionBJ( Player(7), Player(6), true )
    call SetPlayerAllianceStateVisionBJ( Player(7), Player(8), true )
    call SetPlayerAllianceStateVisionBJ( Player(8), Player(0), true )
    call SetPlayerAllianceStateVisionBJ( Player(8), Player(1), true )
    call SetPlayerAllianceStateVisionBJ( Player(8), Player(2), true )
    call SetPlayerAllianceStateVisionBJ( Player(8), Player(3), true )
    call SetPlayerAllianceStateVisionBJ( Player(8), Player(4), true )
    call SetPlayerAllianceStateVisionBJ( Player(8), Player(5), true )
    call SetPlayerAllianceStateVisionBJ( Player(8), Player(6), true )
    call SetPlayerAllianceStateVisionBJ( Player(8), Player(7), true )
    // Force: TRIGSTR_014
    call SetPlayerTeam( Player(9), 1 )
    call SetPlayerTeam( Player(10), 1 )
    call SetPlayerTeam( Player(11), 1 )
    //   Allied
    call SetPlayerAllianceStateAllyBJ( Player(9), Player(10), true )
    call SetPlayerAllianceStateAllyBJ( Player(9), Player(11), true )
    call SetPlayerAllianceStateAllyBJ( Player(10), Player(9), true )
    call SetPlayerAllianceStateAllyBJ( Player(10), Player(11), true )
    call SetPlayerAllianceStateAllyBJ( Player(11), Player(9), true )
    call SetPlayerAllianceStateAllyBJ( Player(11), Player(10), true )
    //   Shared Vision
    call SetPlayerAllianceStateVisionBJ( Player(9), Player(10), true )
    call SetPlayerAllianceStateVisionBJ( Player(9), Player(11), true )
    call SetPlayerAllianceStateVisionBJ( Player(10), Player(9), true )
    call SetPlayerAllianceStateVisionBJ( Player(10), Player(11), true )
    call SetPlayerAllianceStateVisionBJ( Player(11), Player(9), true )
    call SetPlayerAllianceStateVisionBJ( Player(11), Player(10), true )
endfunction
function InitAllyPriorities takes nothing returns nothing
    call SetStartLocPrioCount( 0, 3 )
    call SetStartLocPrio( 0, 0, 1, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 0, 1, 2, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 0, 2, 3, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrioCount( 1, 3 )
    call SetStartLocPrio( 1, 0, 0, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 1, 1, 2, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 1, 2, 3, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrioCount( 2, 3 )
    call SetStartLocPrio( 2, 0, 0, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 2, 1, 1, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 2, 2, 3, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrioCount( 3, 3 )
    call SetStartLocPrio( 3, 0, 0, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 3, 1, 1, MAP_LOC_PRIO_HIGH )
    call SetStartLocPrio( 3, 2, 2, MAP_LOC_PRIO_HIGH )
endfunction
//***************************************************************************
//*
//*  Main Initialization
//*
//***************************************************************************
//===========================================================================
function main takes nothing returns nothing
    call SetCameraBounds( -13568.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), -13824.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM), 13568.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), 13312.0 - GetCameraMargin(CAMERA_MARGIN_TOP), -13568.0 + GetCameraMargin(CAMERA_MARGIN_LEFT), 13312.0 - GetCameraMargin(CAMERA_MARGIN_TOP), 13568.0 - GetCameraMargin(CAMERA_MARGIN_RIGHT), -13824.0 + GetCameraMargin(CAMERA_MARGIN_BOTTOM) )
    call SetDayNightModels( "Environment\\DNC\\DNCLordaeron\\DNCLordaeronTerrain\\DNCLordaeronTerrain.mdl", "Environment\\DNC\\DNCLordaeron\\DNCLordaeronUnit\\DNCLordaeronUnit.mdl" )
    call NewSoundEnvironment( "Default" )
    call SetAmbientDaySound( "NorthrendDay" )
    call SetAmbientNightSound( "NorthrendNight" )
    call SetMapMusic( "Music", true, 0 )
    call CreateRegions( )
    call CreateAllUnits( )
    call InitBlizzard( )
    call InitGlobals( )
    call InitCustomTriggers( )
endfunction
//***************************************************************************
//*
//*  Map Configuration
//*
//***************************************************************************
function config takes nothing returns nothing
    call SetMapName( "TRIGSTR_1232" )
    call SetMapDescription( "TRIGSTR_1234" )
    call SetPlayers( 12 )
    call SetTeams( 12 )
    call SetGamePlacement( MAP_PLACEMENT_TEAMS_TOGETHER )
    call DefineStartLocation( 0, 0.0, 0.0 )
    call DefineStartLocation( 1, 0.0, 0.0 )
    call DefineStartLocation( 2, 0.0, 0.0 )
    call DefineStartLocation( 3, 0.0, 0.0 )
    call DefineStartLocation( 4, 0.0, 0.0 )
    call DefineStartLocation( 5, 0.0, 0.0 )
    call DefineStartLocation( 6, 0.0, 0.0 )
    call DefineStartLocation( 7, 0.0, 0.0 )
    call DefineStartLocation( 8, 0.0, 0.0 )
    call DefineStartLocation( 9, 0.0, 0.0 )
    call DefineStartLocation( 10, 0.0, 0.0 )
    call DefineStartLocation( 11, 0.0, 0.0 )
    // Player setup
    call InitCustomPlayerSlots( )
    call InitCustomTeams( )
    call InitAllyPriorities( )
endfunction
/**/
